generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                  Int        @id @default(autoincrement())
  firstName           String
  lastName            String?
  username            String     @unique @db.VarChar(255)
  email               String     @unique
  password            String
  bio                 String?
  isSeller            Boolean    @default(false)
  isAdmin             Boolean    @default(false)
  profilePicture      String?
  address             String?
  phoneNumber         String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  seller              Seller?
  resetToken          String?
  resetTokenExpiresAt DateTime?
}

model Seller {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  storeName        String
  storeDescription String?
  storeLogo        String?
  businessAddress  String?
  socialMediaLinks Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products         Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int        @default(1)
  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id])
  sellerId    Int
  seller      Seller     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images      Image[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

